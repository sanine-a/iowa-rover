#include <stdarg.h>
#include <string.h>

#include "radioserial.h"
#include "motor.h"
#include "pins.h"

#define RADIO_FREQ 910.0

#define KIOSK1_ADDR 0x11
#define ROVER1_ADDR 0x12
#define KIOSK2_ADDR 0x21
#define ROVER2_ADDR 0x22
int rover_addr, kiosk_addr;


#define MOTOR_SPEED 1.0
Motor left_wheel (AIN1, AIN2, PWMA, MOTOR_SPEED);
Motor right_wheel(BIN1, BIN2, PWMB, MOTOR_SPEED);


// motor movements
void drive(int direction, float amount) {
	left_wheel.setSpeed(direction * 1.0);
	right_wheel.setSpeed(direction * 1.0);
	delay(8000 * amount);
}
void move_forward(float amount) { drive(1, amount); }
void move_backward(float amount) { drive(-1, amount); }
void turn(int direction, float amount) {
	left_wheel.setSpeed(direction * 0.75);
	right_wheel.setSpeed(direction * -0.75);
	delay(2000 * amount);
}
void turn_left(float amount) { turn(-1, amount); }
void turn_right(float amount) { turn(1, amount); }
void pause() { delay(500); }


struct command_t {
	typedef enum {
		MOVE_FORWARD,
		MOVE_BACKWARD,
		TURN_LEFT,
		TURN_RIGHT,
		NONE,
	} action_t;
	action_t action;
	float amount;

	static char action_str(action_t a) {
		switch(a) {
		case action_t::MOVE_FORWARD: return 'F';
		case action_t::MOVE_BACKWARD: return 'B';
		case action_t::TURN_LEFT: return 'L';
		case action_t::TURN_RIGHT: return 'R';
		case action_t::NONE: return 'N';
		default: return '?';
		}
	}

	void print() {
		Serial.print("[");
		Serial.print(action_str(action)); Serial.print(":"); Serial.print(amount);
		Serial.print("]");
	}
};


class Radio : public RadioSerial {
	public:
	Radio() : RadioSerial(RADIO_CS, RADIO_RST, RADIO_INT, RADIO_FREQ) {}
	void onMessage(const char *key, const char *value) {
		Serial.print(" > "); Serial.print(key); Serial.print(":"); Serial.println(value);
		if (strcmp(key, "execute") == 0) {
			parse_commands(value);
			sendMessage("ready", 0);
			execute();
			sendMessage("ready", 1);
			return;
		}

		sendMessage("unknown-command", 1);
	}

	void parse_commands(const char *commands_buf) {
		char actions[] = { 'N', 'N', 'N', 'N' };
		uint8_t amounts[] = { 4, 4, 4, 4 };
		sscanf(
			commands_buf, "%c%d%c%d%c%d%c%d",
			actions+0, amounts+0,
			actions+1, amounts+1,
			actions+2, amounts+2,
			actions+3, amounts+3
		);

		for (int i=0; i<4; i++) {
			switch(actions[i]) {
				case 'F': commands[i].action = command_t::action_t::MOVE_FORWARD; break;
				case 'B': commands[i].action = command_t::action_t::MOVE_BACKWARD; break;
				case 'L': commands[i].action = command_t::action_t::TURN_LEFT; break;
				case 'R': commands[i].action = command_t::action_t::TURN_RIGHT; break;
				case 'N': commands[i].action = command_t::action_t::NONE; break;
			}
			commands[i].amount = ((float)amounts[i])/8.0;
		}

	}


	void dump_commands() {
		for (int i=0; i<4; i++) {
			commands[i].print(); Serial.println();
		}
	}

	protected:
	struct command_t commands[4];

	void execute_command(struct command_t cmd) {
		// do nothing for NONE actions
		if (cmd.action == command_t::action_t::NONE) { return; }

		// briefly pause for actions with 0 amount
		if (cmd.amount < 0.001) {
			left_wheel.setSpeed(0);
			right_wheel.setSpeed(0);
			delay(500);

		// otherwise, do the appropriate movement
		} else { switch(cmd.action) {
		case command_t::action_t::MOVE_FORWARD:
			move_forward(cmd.amount);
			break;
		case command_t::action_t::MOVE_BACKWARD:
			move_backward(cmd.amount);
			break;
		case command_t::action_t::TURN_LEFT:
			turn_left(cmd.amount);
			break;
		case command_t::action_t::TURN_RIGHT:
			turn_right(cmd.amount);
			break;
		default:
			break;
		}}
	}

	void execute() {
		for (int i=0; i<4; i++) {
			execute_command(commands[i]);
		}
		left_wheel.setSpeed(0);
		right_wheel.setSpeed(0);
	}
} radio;





void serial_printf(const char *fmt, ...) {
	static char buf[256];
	va_list args;
	va_start(args, fmt);
	vsnprintf(buf, 256, fmt, args);
	va_end(args);
	Serial.print(buf);
}


void setup() {
	Serial.begin(115200);

	Serial.println(sizeof(radio));
	Serial.println(sizeof(left_wheel));

	radio.parse_commands("F4B8L2N0");
	radio.dump_commands();

	Serial.println("configuring radio...");
	radio.setup();
	Serial.println("done!");

	// choose address
	pinMode(KIOSK_SELECT, INPUT_PULLUP);
	if (!digitalRead(KIOSK_SELECT)) {
		rover_addr = ROVER1_ADDR;
		kiosk_addr = KIOSK1_ADDR;
	} else {
		rover_addr = ROVER2_ADDR;
		kiosk_addr = KIOSK2_ADDR;
	}
	radio.set_addrs(rover_addr, kiosk_addr);
	serial_printf("rover addr 0x%x\n", rover_addr);
	serial_printf("kiosk addr 0x%x\n", kiosk_addr);
}


void loop() {
	radio.update();
}
